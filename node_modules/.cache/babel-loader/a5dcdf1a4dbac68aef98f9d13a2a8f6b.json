{"ast":null,"code":"var _jsxFileName = \"/Users/rachelmadison/lab-1-team-37/src/component/StatusBar.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { makeStyles, withStyles, useTheme } from \"@material-ui/core/styles\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { Paper } from \"@material-ui/core\";\nimport { Grid } from \"@material-ui/core\";\nimport { CategoryColors } from \"../style/colors\"; // STYLING\n// TODO: We need to change the colors of each of the bars that represent a different category.\n// Color-coding may help a ton with better understanding the data! However, if these are color-coded,\n// it must match with the icon colors to be implemented in the individiual to-do list entries\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStylesBootstrap = makeStyles(theme => ({\n  arrow: {\n    color: \"#00bcd4\"\n  },\n  tooltip: {\n    backgroundColor: \"#00bcd4\",\n    fontSize: \"1rem\",\n    color: \"black\",\n    fontWeight: \"bold\"\n  }\n}));\n\nfunction CircularProgressWithLabel(props) {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    display: \"inline-flex\",\n    children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: \"6rem\",\n      variant: \"determinate\",\n      ...props,\n      style: {\n        color: CategoryColors[props.category]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        component: \"div\",\n        style: {\n          color: \"white\"\n        },\n        children: `${Math.round(props.value)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_c = CircularProgressWithLabel;\n\nfunction ProgressTooltip(props) {\n  _s();\n\n  const classes = useStylesBootstrap();\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    arrow: true,\n    classes: classes,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ProgressTooltip, \"c5c0hakfvV/ckKD2/Y47XZYOqdg=\", false, function () {\n  return [useStylesBootstrap];\n});\n\n_c2 = ProgressTooltip;\nvar StyledLinearProgressBars = {};\n\nfor (let color in CategoryColors) {\n  StyledLinearProgressBars[color] = withStyles({\n    root: {\n      \"& .MuiLinearProgress-colorPrimary\": {\n        backgroundColor: CategoryColors[color]\n      },\n      \"& .MuiLinearProgress-barColorPrimary\": {\n        backgroundColor: CategoryColors[color]\n      },\n      \"& .MuiLinearProgress-dashedColorPrimary\": {\n        backgroundImage: \"radial-gradient(#fff 5%, transparent 30%)\"\n      }\n    }\n  })(LinearProgress);\n}\n\nconst StyledLinearProgress = withStyles({\n  root: {\n    \"& .MuiLinearProgress-colorPrimary\": {\n      backgroundColor: \"#e91e63\"\n    },\n    \"& .MuiLinearProgress-barColorPrimary\": {\n      backgroundColor: \"#e91e63\"\n    },\n    \"& .MuiLinearProgress-dashedColorPrimary\": {\n      backgroundImage: \"radial-gradient(#00bcd4 5%, transparent 20%)\"\n    }\n  }\n})(LinearProgress);\nconst CategoryLabel = withStyles({\n  root: {\n    color: \"white\",\n    textAlign: \"left\"\n  },\n  textColor: \"white\"\n})(Typography); // EXPORT\n\nexport default function StatusBar(props) {\n  // The copy of allEntries that we get is from `MainGrid.js`, the true and only copy\n  const allEntries = props.listOfEntries; // Logic for calculating progress bar values\n\n  var WorkTotal = 0;\n  var SchoolTotal = 0;\n  var SelfCareTotal = 0;\n  var OtherTotal = 0;\n  var SocialTotal = 0;\n  var ChoresTotal = 0;\n  allEntries.forEach(entry => {\n    if (entry.category === \"work\") WorkTotal++;\n    if (entry.category === \"school\") SchoolTotal++;\n    if (entry.category === \"self-care\") SelfCareTotal++;\n    if (entry.category === \"other\") OtherTotal++;\n    if (entry.category === \"social\") SocialTotal++;\n    if (entry.category === \"chores\") ChoresTotal++;\n  });\n  const AllTotal = WorkTotal + SchoolTotal + SelfCareTotal + OtherTotal + SocialTotal + ChoresTotal;\n  var WorkDone = 0;\n  var SchoolDone = 0;\n  var SelfCareDone = 0;\n  var OtherDone = 0;\n  var SocialDone = 0;\n  var ChoresDone = 0;\n  allEntries.forEach(entry => {\n    if (entry.done === true && entry.category === \"work\") WorkDone++;\n    if (entry.done === true && entry.category === \"school\") SchoolDone++;\n    if (entry.done === true && entry.category === \"self-care\") SelfCareDone++;\n    if (entry.done === true && entry.category === \"other\") OtherDone++;\n    if (entry.done === true && entry.category === \"social\") SocialDone++;\n    if (entry.done === true && entry.category === \"chores\") ChoresDone++;\n  });\n  var WorkProgress = 0;\n  var SchoolProgress = 0;\n  var SelfCareProgress = 0;\n  var OtherProgress = 0;\n  var SocialProgress = 0;\n  var ChoresProgress = 0;\n  if (WorkTotal !== 0) WorkProgress = WorkDone / WorkTotal * 100;\n  if (SchoolTotal !== 0) SchoolProgress = SchoolDone / SchoolTotal * 100;\n  if (SelfCareTotal !== 0) SelfCareProgress = SelfCareDone / SelfCareTotal * 100;\n  if (OtherTotal !== 0) OtherProgress = OtherDone / OtherTotal * 100;\n  if (SocialTotal !== 0) var SocialProgress = SocialDone / SocialTotal * 100;\n  if (ChoresTotal !== 0) var ChoresProgress = ChoresDone / ChoresTotal * 100;\n\n  const getDistributionPercentage = base => {\n    if (AllTotal === 0) return 0;\n    let percentage = base / AllTotal * 100;\n    return percentage;\n  }; // This uses circular progress components to make it easier for users to\n  // see which categories they tend to focus on the most (theoretically)\n  // *note that this section does not take into account completion statuses\n\n\n  function InsightsCard() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          fontWeight: \"bold\",\n          marginTop: \"2rem\"\n        },\n        variant: \"h5\",\n        children: \"Category Distribution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        backgroundColor: \"blue\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 0,\n          children: [/*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n            variant: \"determinate\",\n            value: getDistributionPercentage(WorkTotal),\n            category: \"work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n            variant: \"determinate\",\n            value: getDistributionPercentage(SchoolTotal),\n            category: \"school\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n            variant: \"determinate\",\n            value: getDistributionPercentage(SelfCareTotal),\n            category: \"self-care\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n            variant: \"determinate\",\n            value: getDistributionPercentage(SocialTotal),\n            category: \"social\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n            variant: \"determinate\",\n            value: getDistributionPercentage(ChoresTotal),\n            category: \"chores\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n            variant: \"determinate\",\n            value: getDistributionPercentage(OtherTotal),\n            category: \"other\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"elevation\",\n        square: true,\n        elevation: 5,\n        margin: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } // Think about how MainGrid.js will be keeping track of progress\n  // If there are n categories we need n progress bars\n  // Progress can be set by either number of items on list or if we later implement time for each item\n  // Basic example, four categories: Work, School, Self Care, Other\n  // User must choose category when adding item\n  // Progress is calculated by number of items of each category, not time\n  // TODO: We can potentially automate the creation of these sections for each category.\n  // Though this works fine as is, it would look a lot cleaner if we made a generator of some sort\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        fontWeight: \"bold\",\n        padding: 0,\n        marginTop: \"1rem\"\n      },\n      variant: \"h5\",\n      children: \"Task Completion by Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressTooltip, {\n      title: WorkDone + \"/\" + WorkTotal,\n      placement: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        m: 3,\n        children: [/*#__PURE__*/_jsxDEV(CategoryLabel, {\n          variant: \"h6\",\n          component: \"h2\",\n          gutterBottom: true,\n          children: \"Work\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledLinearProgressBars.work, {\n          value: WorkProgress,\n          variant: \"buffer\",\n          valueBuffer: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressTooltip, {\n      title: SchoolDone + \"/\" + SchoolTotal,\n      placement: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        m: 3,\n        children: [/*#__PURE__*/_jsxDEV(CategoryLabel, {\n          variant: \"h6\",\n          component: \"h2\",\n          gutterBottom: true,\n          color: \"textSecondary\",\n          children: \"School\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledLinearProgressBars.school, {\n          value: SchoolProgress,\n          variant: \"buffer\",\n          valueBuffer: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressTooltip, {\n      title: SelfCareDone + \"/\" + SelfCareTotal,\n      placement: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        m: 3,\n        children: [/*#__PURE__*/_jsxDEV(CategoryLabel, {\n          variant: \"h6\",\n          component: \"h2\",\n          gutterBottom: true,\n          color: \"Primary\",\n          children: \"Self Care\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledLinearProgressBars.selfcare, {\n          value: SelfCareProgress,\n          variant: \"buffer\",\n          valueBuffer: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressTooltip, {\n      title: SocialDone + \"/\" + SocialTotal,\n      placement: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        m: 3,\n        children: [/*#__PURE__*/_jsxDEV(CategoryLabel, {\n          variant: \"h6\",\n          component: \"h2\",\n          gutterBottom: true,\n          children: \"Social\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledLinearProgressBars.social, {\n          value: SocialProgress,\n          variant: \"buffer\",\n          valueBuffer: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressTooltip, {\n      title: ChoresDone + \"/\" + ChoresTotal,\n      placement: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        m: 3,\n        children: [/*#__PURE__*/_jsxDEV(CategoryLabel, {\n          variant: \"h6\",\n          component: \"h2\",\n          gutterBottom: true,\n          children: \"Chores\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledLinearProgressBars.chores, {\n          value: ChoresProgress,\n          variant: \"buffer\",\n          valueBuffer: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProgressTooltip, {\n      title: OtherDone + \"/\" + OtherTotal,\n      placement: \"left\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        m: 3,\n        children: [/*#__PURE__*/_jsxDEV(CategoryLabel, {\n          variant: \"h6\",\n          component: \"h2\",\n          gutterBottom: true,\n          children: \"Other\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledLinearProgressBars.other, {\n          value: OtherProgress,\n          variant: \"buffer\",\n          valueBuffer: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InsightsCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n_c3 = StatusBar;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CircularProgressWithLabel\");\n$RefreshReg$(_c2, \"ProgressTooltip\");\n$RefreshReg$(_c3, \"StatusBar\");","map":{"version":3,"sources":["/Users/rachelmadison/lab-1-team-37/src/component/StatusBar.js"],"names":["React","makeStyles","withStyles","useTheme","LinearProgress","Box","Typography","Tooltip","CircularProgress","Paper","Grid","CategoryColors","useStylesBootstrap","theme","arrow","color","tooltip","backgroundColor","fontSize","fontWeight","CircularProgressWithLabel","props","category","Math","round","value","ProgressTooltip","classes","StyledLinearProgressBars","root","backgroundImage","StyledLinearProgress","CategoryLabel","textAlign","textColor","StatusBar","allEntries","listOfEntries","WorkTotal","SchoolTotal","SelfCareTotal","OtherTotal","SocialTotal","ChoresTotal","forEach","entry","AllTotal","WorkDone","SchoolDone","SelfCareDone","OtherDone","SocialDone","ChoresDone","done","WorkProgress","SchoolProgress","SelfCareProgress","OtherProgress","SocialProgress","ChoresProgress","getDistributionPercentage","base","percentage","InsightsCard","marginTop","padding"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,QAAiD,0BAAjD;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,cAAT,QAA+B,iBAA/B,C,CAEA;AACA;AACA;AACA;;;;AACA,MAAMC,kBAAkB,GAAGX,UAAU,CAAEY,KAAD,KAAY;AAChDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF,GADyC;AAIhDC,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,EAAE,SADV;AAEPC,IAAAA,QAAQ,EAAE,MAFH;AAGPH,IAAAA,KAAK,EAAE,OAHA;AAIPI,IAAAA,UAAU,EAAE;AAJL;AAJuC,CAAZ,CAAD,CAArC;;AAYA,SAASC,yBAAT,CAAmCC,KAAnC,EAA0C;AACxC,sBACE,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AAAyB,IAAA,OAAO,EAAC,aAAjC;AAAA,4BACE,QAAC,gBAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,OAAO,EAAC,aAFV;AAAA,SAGMA,KAHN;AAIE,MAAA,KAAK,EAAE;AAAEN,QAAAA,KAAK,EAAEJ,cAAc,CAACU,KAAK,CAACC,QAAP;AAAvB;AAJT;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,GAAD;AACE,MAAA,GAAG,EAAE,CADP;AAEE,MAAA,IAAI,EAAE,CAFR;AAGE,MAAA,MAAM,EAAE,CAHV;AAIE,MAAA,KAAK,EAAE,CAJT;AAKE,MAAA,QAAQ,EAAC,UALX;AAME,MAAA,OAAO,EAAC,MANV;AAOE,MAAA,UAAU,EAAC,QAPb;AAQE,MAAA,cAAc,EAAC,QARjB;AAAA,6BAUE,QAAC,UAAD;AACE,QAAA,OAAO,EAAC,SADV;AAEE,QAAA,SAAS,EAAC,KAFZ;AAGE,QAAA,KAAK,EAAE;AAAEP,UAAAA,KAAK,EAAE;AAAT,SAHT;AAAA,kBAIG,GAAEQ,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,KAAjB,CAAwB;AAJ7B;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;KA3BQL,yB;;AA6BT,SAASM,eAAT,CAAyBL,KAAzB,EAAgC;AAAA;;AAC9B,QAAMM,OAAO,GAAGf,kBAAkB,EAAlC;AACA,sBAAO,QAAC,OAAD;AAAS,IAAA,KAAK,MAAd;AAAe,IAAA,OAAO,EAAEe,OAAxB;AAAA,OAAqCN;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAHQK,e;UACSd,kB;;;MADTc,e;AAKT,IAAIE,wBAAwB,GAAG,EAA/B;;AAEA,KAAK,IAAIb,KAAT,IAAkBJ,cAAlB,EAAkC;AAChCiB,EAAAA,wBAAwB,CAACb,KAAD,CAAxB,GAAkCb,UAAU,CAAC;AAC3C2B,IAAAA,IAAI,EAAE;AACJ,2CAAqC;AACnCZ,QAAAA,eAAe,EAAEN,cAAc,CAACI,KAAD;AADI,OADjC;AAIJ,8CAAwC;AACtCE,QAAAA,eAAe,EAAEN,cAAc,CAACI,KAAD;AADO,OAJpC;AAOJ,iDAA2C;AACzCe,QAAAA,eAAe,EAAE;AADwB;AAPvC;AADqC,GAAD,CAAV,CAY/B1B,cAZ+B,CAAlC;AAaD;;AAED,MAAM2B,oBAAoB,GAAG7B,UAAU,CAAC;AACtC2B,EAAAA,IAAI,EAAE;AACJ,yCAAqC;AACnCZ,MAAAA,eAAe,EAAE;AADkB,KADjC;AAIJ,4CAAwC;AACtCA,MAAAA,eAAe,EAAE;AADqB,KAJpC;AAOJ,+CAA2C;AACzCa,MAAAA,eAAe,EAAE;AADwB;AAPvC;AADgC,CAAD,CAAV,CAY1B1B,cAZ0B,CAA7B;AAcA,MAAM4B,aAAa,GAAG9B,UAAU,CAAC;AAC/B2B,EAAAA,IAAI,EAAE;AACJd,IAAAA,KAAK,EAAE,OADH;AAEJkB,IAAAA,SAAS,EAAE;AAFP,GADyB;AAK/BC,EAAAA,SAAS,EAAE;AALoB,CAAD,CAAV,CAMnB5B,UANmB,CAAtB,C,CAQA;;AACA,eAAe,SAAS6B,SAAT,CAAmBd,KAAnB,EAA0B;AACvC;AACA,QAAMe,UAAU,GAAGf,KAAK,CAACgB,aAAzB,CAFuC,CAIvC;;AAEA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,WAAW,GAAG,CAAlB;AAEAP,EAAAA,UAAU,CAACQ,OAAX,CAAoBC,KAAD,IAAW;AAC5B,QAAIA,KAAK,CAACvB,QAAN,KAAmB,MAAvB,EAA+BgB,SAAS;AACxC,QAAIO,KAAK,CAACvB,QAAN,KAAmB,QAAvB,EAAiCiB,WAAW;AAC5C,QAAIM,KAAK,CAACvB,QAAN,KAAmB,WAAvB,EAAoCkB,aAAa;AACjD,QAAIK,KAAK,CAACvB,QAAN,KAAmB,OAAvB,EAAgCmB,UAAU;AAC1C,QAAII,KAAK,CAACvB,QAAN,KAAmB,QAAvB,EAAiCoB,WAAW;AAC5C,QAAIG,KAAK,CAACvB,QAAN,KAAmB,QAAvB,EAAiCqB,WAAW;AAC7C,GAPD;AASA,QAAMG,QAAQ,GACZR,SAAS,GACTC,WADA,GAEAC,aAFA,GAGAC,UAHA,GAIAC,WAJA,GAKAC,WANF;AAQA,MAAII,QAAQ,GAAG,CAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AAEAhB,EAAAA,UAAU,CAACQ,OAAX,CAAoBC,KAAD,IAAW;AAC5B,QAAIA,KAAK,CAACQ,IAAN,KAAe,IAAf,IAAuBR,KAAK,CAACvB,QAAN,KAAmB,MAA9C,EAAsDyB,QAAQ;AAC9D,QAAIF,KAAK,CAACQ,IAAN,KAAe,IAAf,IAAuBR,KAAK,CAACvB,QAAN,KAAmB,QAA9C,EAAwD0B,UAAU;AAClE,QAAIH,KAAK,CAACQ,IAAN,KAAe,IAAf,IAAuBR,KAAK,CAACvB,QAAN,KAAmB,WAA9C,EAA2D2B,YAAY;AACvE,QAAIJ,KAAK,CAACQ,IAAN,KAAe,IAAf,IAAuBR,KAAK,CAACvB,QAAN,KAAmB,OAA9C,EAAuD4B,SAAS;AAChE,QAAIL,KAAK,CAACQ,IAAN,KAAe,IAAf,IAAuBR,KAAK,CAACvB,QAAN,KAAmB,QAA9C,EAAwD6B,UAAU;AAClE,QAAIN,KAAK,CAACQ,IAAN,KAAe,IAAf,IAAuBR,KAAK,CAACvB,QAAN,KAAmB,QAA9C,EAAwD8B,UAAU;AACnE,GAPD;AASA,MAAIE,YAAY,GAAG,CAAnB;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,cAAc,GAAG,CAArB;AAEA,MAAIrB,SAAS,KAAK,CAAlB,EAAqBgB,YAAY,GAAIP,QAAQ,GAAGT,SAAZ,GAAyB,GAAxC;AAErB,MAAIC,WAAW,KAAK,CAApB,EAAuBgB,cAAc,GAAIP,UAAU,GAAGT,WAAd,GAA6B,GAA9C;AAEvB,MAAIC,aAAa,KAAK,CAAtB,EACEgB,gBAAgB,GAAIP,YAAY,GAAGT,aAAhB,GAAiC,GAApD;AAEF,MAAIC,UAAU,KAAK,CAAnB,EAAsBgB,aAAa,GAAIP,SAAS,GAAGT,UAAb,GAA2B,GAA3C;AAEtB,MAAIC,WAAW,KAAK,CAApB,EAAuB,IAAIgB,cAAc,GAAIP,UAAU,GAAGT,WAAd,GAA6B,GAAlD;AAEvB,MAAIC,WAAW,KAAK,CAApB,EAAuB,IAAIgB,cAAc,GAAIP,UAAU,GAAGT,WAAd,GAA6B,GAAlD;;AAEvB,QAAMiB,yBAAyB,GAAIC,IAAD,IAAU;AAC1C,QAAIf,QAAQ,KAAK,CAAjB,EAAoB,OAAO,CAAP;AACpB,QAAIgB,UAAU,GAAID,IAAI,GAAGf,QAAR,GAAoB,GAArC;AACA,WAAOgB,UAAP;AACD,GAJD,CAlEuC,CAwEvC;AACA;AACA;;;AACA,WAASC,YAAT,GAAwB;AACtB,wBACE;AAAA,8BACE,QAAC,UAAD;AACE,QAAA,KAAK,EAAE;AAAE5C,UAAAA,UAAU,EAAE,MAAd;AAAsB6C,UAAAA,SAAS,EAAE;AAAjC,SADT;AAEE,QAAA,OAAO,EAAC,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAA;AAAA;AAAA;AAAA,cATF,eAUE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAA4B,QAAA,eAAe,EAAC,MAA5C;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE;AAAf;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAA,kCACE,QAAC,yBAAD;AACE,YAAA,OAAO,EAAC,aADV;AAEE,YAAA,KAAK,EAAEJ,yBAAyB,CAACtB,SAAD,CAFlC;AAGE,YAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,kBADF,eAME,QAAC,yBAAD;AACE,YAAA,OAAO,EAAC,aADV;AAEE,YAAA,KAAK,EAAEsB,yBAAyB,CAACrB,WAAD,CAFlC;AAGE,YAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,kBANF,eAWE,QAAC,yBAAD;AACE,YAAA,OAAO,EAAC,aADV;AAEE,YAAA,KAAK,EAAEqB,yBAAyB,CAACpB,aAAD,CAFlC;AAGE,YAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,kBAXF,eAgBE,QAAC,yBAAD;AACE,YAAA,OAAO,EAAC,aADV;AAEE,YAAA,KAAK,EAAEoB,yBAAyB,CAAClB,WAAD,CAFlC;AAGE,YAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,kBAhBF,eAqBE,QAAC,yBAAD;AACE,YAAA,OAAO,EAAC,aADV;AAEE,YAAA,KAAK,EAAEkB,yBAAyB,CAACjB,WAAD,CAFlC;AAGE,YAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,kBArBF,eA0BE,QAAC,yBAAD;AACE,YAAA,OAAO,EAAC,aADV;AAEE,YAAA,KAAK,EAAEiB,yBAAyB,CAACnB,UAAD,CAFlC;AAGE,YAAA,QAAQ,EAAC;AAHX;AAAA;AAAA;AAAA;AAAA,kBA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eA6CE;AAAA;AAAA;AAAA;AAAA,cA7CF,eA8CE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,WAAhB;AAA6B,QAAA,MAAM,EAAE,IAArC;AAA2C,QAAA,SAAS,EAAE,CAAtD;AAAyD,QAAA,MAAM,EAAE;AAAjE;AAAA;AAAA;AAAA;AAAA,cA9CF;AAAA,oBADF;AAuDD,GAnIsC,CAqIvC;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AACA,sBACE;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,KAAK,EAAE;AAAEtB,QAAAA,UAAU,EAAE,MAAd;AAAsB8C,QAAAA,OAAO,EAAE,CAA/B;AAAkCD,QAAAA,SAAS,EAAE;AAA7C,OADT;AAEE,MAAA,OAAO,EAAC,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAEjB,QAAQ,GAAG,GAAX,GAAiBT,SAAzC;AAAoD,MAAA,SAAS,EAAC,MAA9D;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,OAAO,EAAC,IAAvB;AAA4B,UAAA,SAAS,EAAC,IAAtC;AAA2C,UAAA,YAAY,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,wBAAD,CAA0B,IAA1B;AACE,UAAA,KAAK,EAAEgB,YADT;AAEE,UAAA,OAAO,EAAE,QAFX;AAGE,UAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF,eAmBE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAEN,UAAU,GAAG,GAAb,GAAmBT,WAA3C;AAAwD,MAAA,SAAS,EAAC,MAAlE;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,gCACE,QAAC,aAAD;AACE,UAAA,OAAO,EAAC,IADV;AAEE,UAAA,SAAS,EAAC,IAFZ;AAGE,UAAA,YAAY,MAHd;AAIE,UAAA,KAAK,EAAC,eAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,wBAAD,CAA0B,MAA1B;AACE,UAAA,KAAK,EAAEgB,cADT;AAEE,UAAA,OAAO,EAAE,QAFX;AAGE,UAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBF,eAoCE,QAAC,eAAD;AACE,MAAA,KAAK,EAAEN,YAAY,GAAG,GAAf,GAAqBT,aAD9B;AAEE,MAAA,SAAS,EAAC,MAFZ;AAAA,6BAIE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,gCACE,QAAC,aAAD;AACE,UAAA,OAAO,EAAC,IADV;AAEE,UAAA,SAAS,EAAC,IAFZ;AAGE,UAAA,YAAY,MAHd;AAIE,UAAA,KAAK,EAAC,SAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,wBAAD,CAA0B,QAA1B;AACE,UAAA,KAAK,EAAEgB,gBADT;AAEE,UAAA,OAAO,EAAE,QAFX;AAGE,UAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YApCF,eAwDE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAEL,UAAU,GAAG,GAAb,GAAmBT,WAA3C;AAAwD,MAAA,SAAS,EAAC,MAAlE;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,OAAO,EAAC,IAAvB;AAA4B,UAAA,SAAS,EAAC,IAAtC;AAA2C,UAAA,YAAY,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,wBAAD,CAA0B,MAA1B;AACE,UAAA,KAAK,EAAEgB,cADT;AAEE,UAAA,OAAO,EAAE,QAFX;AAGE,UAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxDF,eAoEE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAEN,UAAU,GAAG,GAAb,GAAmBT,WAA3C;AAAwD,MAAA,SAAS,EAAC,MAAlE;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,OAAO,EAAC,IAAvB;AAA4B,UAAA,SAAS,EAAC,IAAtC;AAA2C,UAAA,YAAY,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,wBAAD,CAA0B,MAA1B;AACE,UAAA,KAAK,EAAEgB,cADT;AAEE,UAAA,OAAO,EAAE,QAFX;AAGE,UAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YApEF,eAgFE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAET,SAAS,GAAG,GAAZ,GAAkBT,UAA1C;AAAsD,MAAA,SAAS,EAAC,MAAhE;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,OAAO,EAAC,IAAvB;AAA4B,UAAA,SAAS,EAAC,IAAtC;AAA2C,UAAA,YAAY,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,wBAAD,CAA0B,KAA1B;AACE,UAAA,KAAK,EAAEgB,aADT;AAEE,UAAA,OAAO,EAAE,QAFX;AAGE,UAAA,WAAW,EAAE;AAHf;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAhFF,eA4FE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YA5FF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgGD;MA/OuBtB,S","sourcesContent":["import React from \"react\";\nimport { makeStyles, withStyles, useTheme } from \"@material-ui/core/styles\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { Paper } from \"@material-ui/core\";\nimport { Grid } from \"@material-ui/core\";\nimport { CategoryColors } from \"../style/colors\";\n\n// STYLING\n// TODO: We need to change the colors of each of the bars that represent a different category.\n// Color-coding may help a ton with better understanding the data! However, if these are color-coded,\n// it must match with the icon colors to be implemented in the individiual to-do list entries\nconst useStylesBootstrap = makeStyles((theme) => ({\n  arrow: {\n    color: \"#00bcd4\",\n  },\n  tooltip: {\n    backgroundColor: \"#00bcd4\",\n    fontSize: \"1rem\",\n    color: \"black\",\n    fontWeight: \"bold\",\n  },\n}));\n\nfunction CircularProgressWithLabel(props) {\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress\n        size=\"6rem\"\n        variant=\"determinate\"\n        {...props}\n        style={{ color: CategoryColors[props.category] }}\n      />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography\n          variant=\"caption\"\n          component=\"div\"\n          style={{ color: \"white\" }}\n        >{`${Math.round(props.value)}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nfunction ProgressTooltip(props) {\n  const classes = useStylesBootstrap();\n  return <Tooltip arrow classes={classes} {...props} />;\n}\n\nvar StyledLinearProgressBars = {};\n\nfor (let color in CategoryColors) {\n  StyledLinearProgressBars[color] = withStyles({\n    root: {\n      \"& .MuiLinearProgress-colorPrimary\": {\n        backgroundColor: CategoryColors[color],\n      },\n      \"& .MuiLinearProgress-barColorPrimary\": {\n        backgroundColor: CategoryColors[color],\n      },\n      \"& .MuiLinearProgress-dashedColorPrimary\": {\n        backgroundImage: \"radial-gradient(#fff 5%, transparent 30%)\",\n      },\n    },\n  })(LinearProgress);\n}\n\nconst StyledLinearProgress = withStyles({\n  root: {\n    \"& .MuiLinearProgress-colorPrimary\": {\n      backgroundColor: \"#e91e63\",\n    },\n    \"& .MuiLinearProgress-barColorPrimary\": {\n      backgroundColor: \"#e91e63\",\n    },\n    \"& .MuiLinearProgress-dashedColorPrimary\": {\n      backgroundImage: \"radial-gradient(#00bcd4 5%, transparent 20%)\",\n    },\n  },\n})(LinearProgress);\n\nconst CategoryLabel = withStyles({\n  root: {\n    color: \"white\",\n    textAlign: \"left\",\n  },\n  textColor: \"white\",\n})(Typography);\n\n// EXPORT\nexport default function StatusBar(props) {\n  // The copy of allEntries that we get is from `MainGrid.js`, the true and only copy\n  const allEntries = props.listOfEntries;\n\n  // Logic for calculating progress bar values\n\n  var WorkTotal = 0;\n  var SchoolTotal = 0;\n  var SelfCareTotal = 0;\n  var OtherTotal = 0;\n  var SocialTotal = 0;\n  var ChoresTotal = 0;\n\n  allEntries.forEach((entry) => {\n    if (entry.category === \"work\") WorkTotal++;\n    if (entry.category === \"school\") SchoolTotal++;\n    if (entry.category === \"self-care\") SelfCareTotal++;\n    if (entry.category === \"other\") OtherTotal++;\n    if (entry.category === \"social\") SocialTotal++;\n    if (entry.category === \"chores\") ChoresTotal++;\n  });\n\n  const AllTotal =\n    WorkTotal +\n    SchoolTotal +\n    SelfCareTotal +\n    OtherTotal +\n    SocialTotal +\n    ChoresTotal;\n\n  var WorkDone = 0;\n  var SchoolDone = 0;\n  var SelfCareDone = 0;\n  var OtherDone = 0;\n  var SocialDone = 0;\n  var ChoresDone = 0;\n\n  allEntries.forEach((entry) => {\n    if (entry.done === true && entry.category === \"work\") WorkDone++;\n    if (entry.done === true && entry.category === \"school\") SchoolDone++;\n    if (entry.done === true && entry.category === \"self-care\") SelfCareDone++;\n    if (entry.done === true && entry.category === \"other\") OtherDone++;\n    if (entry.done === true && entry.category === \"social\") SocialDone++;\n    if (entry.done === true && entry.category === \"chores\") ChoresDone++;\n  });\n\n  var WorkProgress = 0;\n  var SchoolProgress = 0;\n  var SelfCareProgress = 0;\n  var OtherProgress = 0;\n  var SocialProgress = 0;\n  var ChoresProgress = 0;\n\n  if (WorkTotal !== 0) WorkProgress = (WorkDone / WorkTotal) * 100;\n\n  if (SchoolTotal !== 0) SchoolProgress = (SchoolDone / SchoolTotal) * 100;\n\n  if (SelfCareTotal !== 0)\n    SelfCareProgress = (SelfCareDone / SelfCareTotal) * 100;\n\n  if (OtherTotal !== 0) OtherProgress = (OtherDone / OtherTotal) * 100;\n\n  if (SocialTotal !== 0) var SocialProgress = (SocialDone / SocialTotal) * 100;\n\n  if (ChoresTotal !== 0) var ChoresProgress = (ChoresDone / ChoresTotal) * 100;\n\n  const getDistributionPercentage = (base) => {\n    if (AllTotal === 0) return 0;\n    let percentage = (base / AllTotal) * 100;\n    return percentage;\n  };\n\n  // This uses circular progress components to make it easier for users to\n  // see which categories they tend to focus on the most (theoretically)\n  // *note that this section does not take into account completion statuses\n  function InsightsCard() {\n    return (\n      <>\n        <Typography\n          style={{ fontWeight: \"bold\", marginTop: \"2rem\" }}\n          variant=\"h5\"\n        >\n          Category Distribution\n        </Typography>\n        {/* TODO: This br makes me feel uncomfortable, but for some reason adding margins to the grid did not work.\n        Any thoughts on possible alternatives? */}\n        <br />\n        <Grid container spacing={3} backgroundColor=\"blue\">\n          <Grid item xs={0}></Grid>\n          <Grid item xs={0}>\n            <CircularProgressWithLabel\n              variant=\"determinate\"\n              value={getDistributionPercentage(WorkTotal)}\n              category=\"work\"\n            />\n            <CircularProgressWithLabel\n              variant=\"determinate\"\n              value={getDistributionPercentage(SchoolTotal)}\n              category=\"school\"\n            />\n            <CircularProgressWithLabel\n              variant=\"determinate\"\n              value={getDistributionPercentage(SelfCareTotal)}\n              category=\"self-care\"\n            />\n            <CircularProgressWithLabel\n              variant=\"determinate\"\n              value={getDistributionPercentage(SocialTotal)}\n              category=\"social\"\n            />\n            <CircularProgressWithLabel\n              variant=\"determinate\"\n              value={getDistributionPercentage(ChoresTotal)}\n              category=\"chores\"\n            />\n            <CircularProgressWithLabel\n              variant=\"determinate\"\n              value={getDistributionPercentage(OtherTotal)}\n              category=\"other\"\n            />\n          </Grid>\n        </Grid>\n        <br />\n        <Paper variant={\"elevation\"} square={true} elevation={5} margin={0}>\n          {/* TODO: we can change this text based on how balanced the distribution of the user's tasks are \n          ex: if they focus on one category alone for 80% of their tasks, we can say something like\n          \"There is definite room for improvement!\" */}\n          {/* <Typography variant=\"h6\">Balance is key!</Typography> */}\n        </Paper>\n      </>\n    );\n  }\n\n  // Think about how MainGrid.js will be keeping track of progress\n  // If there are n categories we need n progress bars\n  // Progress can be set by either number of items on list or if we later implement time for each item\n\n  // Basic example, four categories: Work, School, Self Care, Other\n  // User must choose category when adding item\n  // Progress is calculated by number of items of each category, not time\n\n  // TODO: We can potentially automate the creation of these sections for each category.\n  // Though this works fine as is, it would look a lot cleaner if we made a generator of some sort\n  return (\n    <div>\n      <Typography\n        style={{ fontWeight: \"bold\", padding: 0, marginTop: \"1rem\" }}\n        variant=\"h5\"\n      >\n        Task Completion by Category\n      </Typography>\n      <ProgressTooltip title={WorkDone + \"/\" + WorkTotal} placement=\"left\">\n        <Box m={3}>\n          <CategoryLabel variant=\"h6\" component=\"h2\" gutterBottom>\n            Work\n          </CategoryLabel>\n          <StyledLinearProgressBars.work\n            value={WorkProgress}\n            variant={\"buffer\"}\n            valueBuffer={0}\n          />\n        </Box>\n      </ProgressTooltip>\n      <ProgressTooltip title={SchoolDone + \"/\" + SchoolTotal} placement=\"left\">\n        <Box m={3}>\n          <CategoryLabel\n            variant=\"h6\"\n            component=\"h2\"\n            gutterBottom\n            color=\"textSecondary\"\n          >\n            School\n          </CategoryLabel>\n          <StyledLinearProgressBars.school\n            value={SchoolProgress}\n            variant={\"buffer\"}\n            valueBuffer={0}\n          />\n        </Box>\n      </ProgressTooltip>\n      <ProgressTooltip\n        title={SelfCareDone + \"/\" + SelfCareTotal}\n        placement=\"left\"\n      >\n        <Box m={3}>\n          <CategoryLabel\n            variant=\"h6\"\n            component=\"h2\"\n            gutterBottom\n            color=\"Primary\"\n          >\n            Self Care\n          </CategoryLabel>\n          <StyledLinearProgressBars.selfcare\n            value={SelfCareProgress}\n            variant={\"buffer\"}\n            valueBuffer={0}\n          />\n        </Box>\n      </ProgressTooltip>\n      <ProgressTooltip title={SocialDone + \"/\" + SocialTotal} placement=\"left\">\n        <Box m={3}>\n          <CategoryLabel variant=\"h6\" component=\"h2\" gutterBottom>\n            Social\n          </CategoryLabel>\n          <StyledLinearProgressBars.social\n            value={SocialProgress}\n            variant={\"buffer\"}\n            valueBuffer={0}\n          />\n        </Box>\n      </ProgressTooltip>\n      <ProgressTooltip title={ChoresDone + \"/\" + ChoresTotal} placement=\"left\">\n        <Box m={3}>\n          <CategoryLabel variant=\"h6\" component=\"h2\" gutterBottom>\n            Chores\n          </CategoryLabel>\n          <StyledLinearProgressBars.chores\n            value={ChoresProgress}\n            variant={\"buffer\"}\n            valueBuffer={0}\n          />\n        </Box>\n      </ProgressTooltip>\n      <ProgressTooltip title={OtherDone + \"/\" + OtherTotal} placement=\"left\">\n        <Box m={3}>\n          <CategoryLabel variant=\"h6\" component=\"h2\" gutterBottom>\n            Other\n          </CategoryLabel>\n          <StyledLinearProgressBars.other\n            value={OtherProgress}\n            variant={\"buffer\"}\n            valueBuffer={0}\n          />\n        </Box>\n      </ProgressTooltip>\n      <InsightsCard />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}