{"ast":null,"code":"var _jsxFileName = \"/Users/rachelmadison/lab-1-team-37/src/component/MainGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MainBox from \"./MainBox\";\nimport StatusBar from \"./StatusBar\"; // STYLING\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    width: \"114rem\",\n    height: \"50rem\",\n    marginTop: \"2rem\",\n    margin: \"auto\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    height: \"50rem\",\n    color: theme.palette.text.secondary,\n    backgroundColor: \"#264653\",\n    borderRadius: \"0rem\",\n    overflow: \"hidden\"\n  },\n  greeting: {\n    paddingBottom: \"1rem\"\n  }\n}));\nlet curId = 0;\n\nclass Task {\n  /* someone remind me to make a default value for category because I might die if I\n     have to continue using this language without every conceivable type hint. It's\n     going to be an as yet undefined object though so I still have to think about it.\n  */\n  constructor(title = \"Do homework\", category, isDone) {\n    if (category == \"\" || category == undefined) {\n      category = \"other\";\n    }\n\n    this.title = title;\n    this.category = category;\n    this.id = curId;\n    curId = curId + 1;\n    this.done = isDone;\n    let newDate = new Date();\n    this.date = newDate;\n  }\n\n} // EXPORT\n\n\nexport default function MainGrid() {\n  _s();\n\n  const classes = useStyles(); // TODO: Decide if we want to include this or not in the final version\n  // Though we don't want to force `to-do list items` on the user, I feel like our strength\n  // is having the extra feature providing insight on how we value certain categories\n  // through the number of tasks we have in each one and our progress in each category.\n  // My 2 cents: let's keep them but provide users with a handy \"delete all\" button?\n\n  const [lastAction, setLastAction] = useState(\"\");\n  const [allEntries, setAllEntries] = useState([new Task(\"Do homework\", \"school\", true), new Task(\"Eat dinner\", \"self-care\", true), new Task(\"Spend time with family\", \"social\", false), new Task(\"Watch a movie\", \"other\", true), new Task(\"Listen to music\", \"other\", false), new Task(\"Do the dishes\", \"chores\", false), new Task(\"Cook breakfast\", \"chores\", true), new Task(\"Go to work\", \"work\", true), new Task(\"Sleep in\", \"self-care\", true), new Task(\"Go for a walk\", \"self-care\", false), new Task(\"Have lunch with friends\", \"social\", false), new Task(\"Review for exam\", \"school\", false)]);\n\n  const handleAdd = obj => {\n    if (lastAction !== \"add\") setLastAction(\"add\");\n    var newState = []; // Copy old entries over\n\n    allEntries.map(_value => {\n      newState.push(_value);\n    }); // Push new entry obj\n\n    newState.push(new Task(obj.title, obj.category, false)); // Update state\n\n    setAllEntries(newState);\n  };\n\n  const handleDelete = id => {\n    if (lastAction !== \"delete\") setLastAction(\"delete\");\n    setAllEntries(entries => entries.filter(entry => entry.id !== id));\n  };\n\n  const handleToggle = value => () => {\n    if (lastAction !== \"toggle\") setLastAction(\"toggle\");\n    var newState = [];\n    allEntries.map(_value => {\n      if (_value.id === value.id) {\n        _value.done = !_value.done;\n      }\n\n      newState.push(_value);\n    });\n    setAllEntries(newState);\n  };\n\n  const handleEdit = obj => {\n    if (lastAction !== \"edit\") setLastAction(\"edit\");\n    var duplicateFound = false; // Still enforce the `no duplicate entries` rule here\n\n    allEntries.forEach(_value => {\n      if (_value.title.toLowerCase() == obj.title.toLowerCase()) {\n        duplicateFound = true;\n      }\n    });\n\n    if (duplicateFound === false) {\n      var newState = [];\n      allEntries.map(_value => {\n        if (_value.id === obj.id) {\n          if (obj.category !== \"\") {\n            _value.category = obj.category;\n          }\n\n          if (obj.title !== \"\") {\n            _value.title = obj.title;\n          }\n        }\n\n        newState.push(_value);\n      });\n      setAllEntries(newState);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(MainBox, {\n            remotelyHandleEdit: handleEdit,\n            remotelyHandleToggle: handleToggle,\n            listOfEntries: allEntries,\n            remotelyHandleAdd: handleAdd,\n            remotelyHandleDelete: handleDelete,\n            addedNewEntry: lastAction === \"add\" ? true : false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(StatusBar, {\n            listOfEntries: allEntries\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MainGrid, \"tb0UrXxTvO48oEE++IgopZ/Zg7k=\", false, function () {\n  return [useStyles];\n});\n\n_c = MainGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainGrid\");","map":{"version":3,"sources":["/Users/rachelmadison/lab-1-team-37/src/component/MainGrid.js"],"names":["React","useState","makeStyles","Paper","Grid","MainBox","StatusBar","useStyles","theme","root","flexGrow","width","height","marginTop","margin","paper","padding","spacing","textAlign","color","palette","text","secondary","backgroundColor","borderRadius","overflow","greeting","paddingBottom","curId","Task","constructor","title","category","isDone","undefined","id","done","newDate","Date","date","MainGrid","classes","lastAction","setLastAction","allEntries","setAllEntries","handleAdd","obj","newState","map","_value","push","handleDelete","entries","filter","entry","handleToggle","value","handleEdit","duplicateFound","forEach","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MainBox from \"./MainBox\";\nimport StatusBar from \"./StatusBar\";\n\n// STYLING\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: \"114rem\",\n    height: \"50rem\",\n    marginTop: \"2rem\",\n    margin: \"auto\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    height: \"50rem\",\n    color: theme.palette.text.secondary,\n    backgroundColor: \"#264653\",\n    borderRadius: \"0rem\",\n    overflow: \"hidden\",\n  },\n  greeting: {\n    paddingBottom: \"1rem\",\n  },\n}));\n\nlet curId = 0;\nclass Task {\n  /* someone remind me to make a default value for category because I might die if I\n     have to continue using this language without every conceivable type hint. It's\n     going to be an as yet undefined object though so I still have to think about it.\n  */\n  constructor(title = \"Do homework\", category, isDone) {\n    if (category == \"\" || category == undefined) {\n      category = \"other\";\n    }\n\n    this.title = title;\n    this.category = category;\n    this.id = curId;\n    curId = curId + 1;\n    this.done = isDone;\n    let newDate = new Date();\n    this.date = newDate;\n  }\n}\n\n// EXPORT\nexport default function MainGrid() {\n  const classes = useStyles();\n\n  // TODO: Decide if we want to include this or not in the final version\n  // Though we don't want to force `to-do list items` on the user, I feel like our strength\n  // is having the extra feature providing insight on how we value certain categories\n  // through the number of tasks we have in each one and our progress in each category.\n  // My 2 cents: let's keep them but provide users with a handy \"delete all\" button?\n  const [lastAction, setLastAction] = useState(\"\");\n  const [allEntries, setAllEntries] = useState([\n    new Task(\"Do homework\", \"school\", true),\n    new Task(\"Eat dinner\", \"self-care\", true),\n    new Task(\"Spend time with family\", \"social\", false),\n    new Task(\"Watch a movie\", \"other\", true),\n    new Task(\"Listen to music\", \"other\", false),\n    new Task(\"Do the dishes\", \"chores\", false),\n    new Task(\"Cook breakfast\", \"chores\", true),\n    new Task(\"Go to work\", \"work\", true),\n    new Task(\"Sleep in\", \"self-care\", true),\n    new Task(\"Go for a walk\", \"self-care\", false),\n    new Task(\"Have lunch with friends\", \"social\", false),\n    new Task(\"Review for exam\", \"school\", false),\n  ]);\n\n  const handleAdd = (obj) => {\n    if (lastAction !== \"add\") setLastAction(\"add\");\n    var newState = [];\n\n    // Copy old entries over\n    allEntries.map((_value) => {\n      newState.push(_value);\n    });\n\n    // Push new entry obj\n    newState.push(new Task(obj.title, obj.category, false));\n\n    // Update state\n    setAllEntries(newState);\n  };\n\n  const handleDelete = (id) => {\n    if (lastAction !== \"delete\") setLastAction(\"delete\");\n    setAllEntries((entries) => entries.filter((entry) => entry.id !== id));\n  };\n\n  const handleToggle = (value) => () => {\n    if (lastAction !== \"toggle\") setLastAction(\"toggle\");\n    var newState = [];\n    allEntries.map((_value) => {\n      if (_value.id === value.id) {\n        _value.done = !_value.done;\n      }\n      newState.push(_value);\n    });\n    setAllEntries(newState);\n  };\n\n  const handleEdit = (obj) => {\n    if (lastAction !== \"edit\") setLastAction(\"edit\");\n    var duplicateFound = false;\n\n    // Still enforce the `no duplicate entries` rule here\n    allEntries.forEach((_value) => {\n      if (_value.title.toLowerCase() == obj.title.toLowerCase()) {\n        duplicateFound = true;\n      }\n    });\n\n    if (duplicateFound === false) {\n      var newState = [];\n      allEntries.map((_value) => {\n        if (_value.id === obj.id) {\n          if (obj.category !== \"\") {\n            _value.category = obj.category;\n          }\n          if (obj.title !== \"\") {\n            _value.title = obj.title;\n          }\n        }\n        newState.push(_value);\n      });\n      setAllEntries(newState);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        {/* This one's the big box that will contain our to-do list! */}\n        <Grid item xs>\n          <Paper className={classes.paper}>\n            {/* This component is what actually houses the to-do list\n            and manages the state of the list. */}\n            <MainBox\n              remotelyHandleEdit={handleEdit}\n              remotelyHandleToggle={handleToggle}\n              listOfEntries={allEntries}\n              remotelyHandleAdd={handleAdd}\n              remotelyHandleDelete={handleDelete}\n              addedNewEntry={lastAction === \"add\" ? true : false}\n            />\n            {/* Notice the props we passed to the `TabPanel` component.\n            We'll have to do something similar to `remotelyHandleToggle` for all other list functions! */}\n          </Paper>\n        </Grid>\n        {/* This is the smaller box to the side that we can use for adding more things. */}\n        <Grid item xs={3}>\n          <Paper className={classes.paper}>\n            <StatusBar listOfEntries={allEntries} />\n            {/* We need the list of entries inside StatusBar too, so we're passing it as props. */}\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}